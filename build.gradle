plugins {
	id 'org.springframework.boot' version "$SPRING_BOOT_VERSION"
	id 'io.spring.dependency-management' version "$SPRING_DEPENDENCY_VERSION"
	id 'org.jetbrains.kotlin.plugin.spring' version "$KOTLIN_VERSION"
	id 'org.jetbrains.kotlin.jvm' version "$KOTLIN_VERSION"
	id 'com.github.ben-manes.versions' version "$GRADLE_VERSIONS_PLUGIN_VERSION"
}

// Java options
java.sourceCompatibility = JavaVersion.VERSION_18
java.targetCompatibility = JavaVersion.VERSION_18

repositories {
	mavenCentral()
}

// Dependencies
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-logging'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib'
	implementation "io.github.microutils:kotlin-logging-jvm:$LOGGING_VERSION"
	implementation "org.jetbrains.kotlinx:kotlinx-html-jvm:0.8.0"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

// Kotlin options
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '16'
	}
}

wrapper {
	gradleVersion GRADLE_VERSION
}

// Dependency updates
tasks.named("dependencyUpdates").configure {
	rejectVersionIf {
		['alpha', 'beta', 'm', 'rc', 'snapshot'].any { qualifier ->
			it.candidate.version.toLowerCase().contains(qualifier) &&
			!it.candidate.version.toLowerCase().contains('maven')
		}
	}
	gradleReleaseChannel="current"
}

tasks.withType(Test).all {
	useJUnitPlatform()
}
